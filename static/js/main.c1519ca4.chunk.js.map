{"version":3,"sources":["components/Cell.js","components/Board.js","components/Slider.js","star.svg","components/DifficultyMeter.js","algorithms/solve.js","unsolvedBoards.js","helpers.js","components/SudokuSolver.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","className","status","id","number","Board","board","map","row","i","cell","j","Slider","useState","maxDelay","minDelay","delay","setDelay","type","min","max","onChange","e","target","value","DifficultyMeter","Array","currentBoardIdx","src","star","alt","solve","animations","findEmptyCell","col","maxCellValue","num","numPlacementIsLegal","push","length","blockRowIndex","blockColIndex","unsolvedBoards","deepCopyBoard","boardCopy","forEach","rowCopy","convertBoardArrayToObjects","arr","newBoard","newRow","SudokuSolver","buttonsDisabled","setButtonsDisabled","setCurrentBoardIdx","boardValues","setBoardValues","solved","setSolved","a","anim","animSpeed","document","getElementById","animateCell","Promise","resolve","setTimeout","disabled","onClick","animateSolution","newBoardIdx","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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AAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KC3ChBC,EAAgB,SAACrC,GAC5B,IAAIsC,EAAY,GAYhB,OAVAtC,EAAMuC,SAAQ,SAACrC,GACb,IAAIsC,EAAU,GAEdtC,EAAIqC,SAAQ,SAACnC,GACXoC,EAAQR,KAAK5B,MAGfkC,EAAUN,KAAKQ,MAGVF,GAGIG,EAA6B,SAACC,GACzC,IAAIC,EAAW,GAkBf,OAhBAD,EAAIH,SAAQ,SAACrC,GACX,IAAI0C,EAAS,GAEb1C,EAAIqC,SAAQ,SAACnC,GAOXwC,EAAOZ,KAAK,CAAElC,OAAQM,EAAMR,OAAQ,cAGtC+C,EAASX,KAAKY,MAGTD,GC6CME,EAxEM,WACnB,MAA8CtC,oBAAS,GAAvD,mBAAOuC,EAAP,KAAwBC,EAAxB,KACA,EAA8CxC,mBAAS,GAAvD,mBAAOc,EAAP,KAAwB2B,EAAxB,KACA,EAAsCzC,mBACpCkC,EAA2BL,EAAef,KAD5C,mBAAO4B,EAAP,KAAoBC,EAApB,KAGA,EAA4B3C,oBAAS,GAArC,mBAAO4C,EAAP,KAAeC,EAAf,KANyB,4CAQzB,WAA+BpD,GAA/B,2BAAAqD,EAAA,2DACuB5B,EAAMY,EAAcrC,IAD3C,mBACS0B,EADT,KAEEqB,GAAmB,IAEfrB,EAJN,+BAKuBA,GALvB,gEAKe4B,EALf,QAMUC,EAAYC,SAASC,eAAe,aAAavC,MAN3D,UAOYwC,EAAYJ,EAAMC,GAP9B,+IAWER,GAAmB,GACnBK,GAAU,GAZZ,iEARyB,sBAuBzB,IAAMM,EAAc,SAACJ,EAAMC,GACzB,OAAO,IAAII,SAAQ,SAACC,GAClBC,YAAW,WACT,IAAIlB,EAAWN,EAAcY,GAC7BN,EAASW,EAAKpD,KAAKoD,EAAK1B,KAAK9B,OAASwD,EAAKxD,OAC3C6C,EAASW,EAAKpD,KAAKoD,EAAK1B,KAAKhC,OAAS0D,EAAK1D,OAC3CsD,EAAeP,GACfiB,MALQ,SAMPL,EAAa,QAgBpB,OACE,qCACE,cAAC,EAAD,CAAiBlC,gBAAiBA,IAClC,cAAC,EAAD,CAAOrB,MAAOiD,IACd,sBAAKpD,GAAG,UAAR,UACE,wBACEiE,SAAUhB,GAAmBK,EAC7BY,QAAS,kBAtDQ,2CAsDFC,CAAgB5B,EAAef,KAFhD,mBAOA,wBAAQyC,SAAUhB,EAAiBiB,QAjBtB,WACjBb,EAAeT,EAA2BL,EAAef,KACzD+B,GAAU,IAeN,mBAIA,wBAAQU,SAAUhB,EAAiBiB,QA5BrB,WAClB,IAAIE,GAAe5C,EAAkB,GAAKe,EAAeH,OACzDiB,EAAeT,EAA2BL,EAAe6B,KACzDjB,EAAmBiB,GACnBb,GAAU,IAwBN,0BAIF,cAAC,EAAD,QChESc,MATf,WACE,OACE,gCACE,+DACA,cAAC,EAAD,QCMSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,SAM1BU,M","file":"static/js/main.c1519ca4.chunk.js","sourcesContent":["export const Cell = (props) => {\n  return (\n    <td className={`cell ${props.status}`} id={props.id}>\n      {props.number ? props.number : \"\"}\n    </td>\n  );\n};\n","import { Cell } from \"./Cell.js\";\n\nexport const Board = (props) => {\n  return (\n    <table id=\"board\">\n      <tbody>\n        {props.board.map((row, i) => (\n          <tr className=\"row\" key={i}>\n            {row.map((cell, j) => (\n              <Cell\n                key={j}\n                number={cell.number}\n                status={cell.status}\n                id={`cell[${i}][${j}]`}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useState } from \"react\";\n\nexport const Slider = () => {\n  const [maxDelay] = useState(25);\n  const [minDelay] = useState(1);\n  const [delay, setDelay] = useState(maxDelay);\n\n  return (\n    <>\n      <div className=\"slidercontainer\">\n        <p>Delay: {delay ** 2}ms</p>\n        <input\n          type=\"range\"\n          min={minDelay}\n          max={maxDelay}\n          id=\"animSpeed\"\n          onChange={(e) => setDelay(e.target.value)}\n        />\n      </div>\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/star.97f0a112.svg\";","import star from \"../star.svg\";\n\nexport const DifficultyMeter = (props) => {\n  return (\n    <div id=\"difficultyMeter\">\n      {[...Array(props.currentBoardIdx + 1)].map((e, i) => (\n        <img\n          key={i}\n          src={star}\n          alt=\"star\"\n          className={`star${props.currentBoardIdx === 3 ? \" extreme\" : \"\"}`}\n        />\n      ))}\n    </div>\n  );\n};\n","export const solve = (board, animations = []) => {\n  var [row, col] = findEmptyCell(board);\n  var maxCellValue = 9;\n\n  if (row === -1 && col === -1) {\n    return [animations, board]; //Board is complete.\n  }\n\n  for (let num = 1; num <= maxCellValue; num++) {\n    if (numPlacementIsLegal(board, row, col, num)) {\n      board[row][col] = num;\n      animations.push({\n        cell: `cell[${row}][${col}]`,\n        row: row,\n        col: col,\n        number: num,\n        status: \"active\",\n      });\n      if (solve(board, animations)) return [animations, board];\n\n      // Remove the value if it does not lead to a solved board\n      board[row][col] = 0;\n      animations.push({\n        cell: `cell[${row}][${col}]`,\n        row: row,\n        col: col,\n        number: 0,\n        status: \"visited\",\n      });\n    }\n  }\n\n  return false;\n};\n\nconst findEmptyCell = (board) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 0) {\n        return [i, j];\n      }\n    }\n  }\n\n  return [-1, -1]; //No empty cells found, board is complete.\n};\n\nconst numPlacementIsLegal = (board, row, col, num) => {\n  var blockSize = 3;\n  var blockRowIndex = row - (row % blockSize);\n  var blockColIndex = col - (col % blockSize);\n\n  //Check if number is already in the block\n  for (let i = blockRowIndex; i < blockRowIndex + blockSize; i++) {\n    for (let j = blockColIndex; j < blockColIndex + blockSize; j++) {\n      if (board[i][j] === num) return false;\n    }\n  }\n\n  for (let i = 0; i < board.length; i++) {\n    if (board[i][col] === num || board[row][i] === num) return false;\n  }\n\n  return true;\n};\n","export const unsolvedBoards = [\n  [\n    [5, 3, 0, 0, 7, 0, 9, 0, 0],\n    [6, 0, 2, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 4, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 1, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 5, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9],\n  ],\n  [\n    [1, 2, 0, 6, 0, 8, 0, 0, 0],\n    [0, 8, 4, 0, 0, 0, 7, 0, 1],\n    [0, 6, 0, 1, 4, 0, 0, 0, 0],\n    [3, 0, 0, 0, 6, 1, 5, 8, 0],\n    [6, 0, 1, 0, 0, 0, 2, 7, 4],\n    [4, 5, 8, 7, 0, 2, 6, 1, 3],\n    [8, 3, 0, 0, 0, 4, 0, 0, 7],\n    [2, 0, 9, 0, 5, 0, 0, 0, 6],\n    [0, 0, 0, 3, 0, 6, 0, 0, 2],\n  ],\n  [\n    [3, 0, 6, 5, 0, 8, 4, 0, 0],\n    [5, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [6, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n  ],\n  [\n    [8, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 3, 6, 0, 0, 0, 0, 0],\n    [0, 7, 0, 0, 9, 0, 2, 0, 0],\n    [0, 5, 0, 0, 0, 7, 0, 0, 0],\n    [0, 0, 0, 0, 4, 5, 7, 0, 0],\n    [0, 0, 0, 1, 0, 0, 0, 3, 0],\n    [0, 0, 1, 0, 0, 0, 0, 6, 8],\n    [0, 0, 8, 5, 0, 0, 0, 1, 0],\n    [0, 9, 0, 0, 0, 0, 4, 0, 0],\n  ],\n];\n\nexport const solutions = [\n  [\n    [5, 3, 4, 6, 7, 8, 9, 1, 2],\n    [6, 7, 2, 1, 9, 5, 3, 4, 8],\n    [1, 9, 8, 3, 4, 2, 5, 6, 7],\n    [8, 5, 9, 7, 6, 1, 4, 2, 3],\n    [4, 2, 6, 8, 5, 3, 7, 9, 1],\n    [7, 1, 3, 9, 2, 4, 8, 5, 6],\n    [9, 6, 1, 5, 3, 7, 2, 8, 4],\n    [2, 8, 7, 4, 1, 9, 6, 3, 5],\n    [3, 4, 5, 2, 8, 6, 1, 7, 9],\n  ],\n  [\n    [1, 2, 3, 6, 7, 8, 9, 4, 5],\n    [5, 8, 4, 2, 3, 9, 7, 6, 1],\n    [9, 6, 7, 1, 4, 5, 3, 2, 8],\n    [3, 7, 2, 4, 6, 1, 5, 8, 9],\n    [6, 9, 1, 5, 8, 3, 2, 7, 4],\n    [4, 5, 8, 7, 9, 2, 6, 1, 3],\n    [8, 3, 6, 9, 2, 4, 1, 5, 7],\n    [2, 1, 9, 8, 5, 7, 4, 3, 6],\n    [7, 4, 5, 3, 1, 6, 8, 9, 2],\n  ],\n  [\n    [3, 1, 6, 5, 7, 8, 4, 9, 2],\n    [5, 2, 9, 1, 3, 4, 7, 6, 8],\n    [4, 8, 7, 6, 2, 9, 5, 3, 1],\n    [2, 6, 3, 4, 1, 5, 9, 8, 7],\n    [9, 7, 4, 8, 6, 3, 1, 2, 5],\n    [8, 5, 1, 7, 9, 2, 6, 4, 3],\n    [1, 3, 8, 9, 4, 7, 2, 5, 6],\n    [6, 9, 2, 3, 5, 1, 8, 7, 4],\n    [7, 4, 5, 2, 8, 6, 3, 1, 9],\n  ],\n  [\n    [8, 1, 2, 7, 5, 3, 6, 4, 9],\n    [9, 4, 3, 6, 8, 2, 1, 7, 5],\n    [6, 7, 5, 4, 9, 1, 2, 8, 3],\n    [1, 5, 4, 2, 3, 7, 8, 9, 6],\n    [3, 6, 9, 8, 4, 5, 7, 2, 1],\n    [2, 8, 7, 1, 6, 9, 5, 3, 4],\n    [5, 2, 1, 9, 7, 4, 3, 6, 8],\n    [4, 3, 8, 5, 2, 6, 9, 1, 7],\n    [7, 9, 6, 3, 1, 8, 4, 5, 2],\n  ],\n];\n","export const deepCopyBoard = (board) => {\n  let boardCopy = [];\n\n  board.forEach((row) => {\n    let rowCopy = [];\n\n    row.forEach((cell) => {\n      rowCopy.push(cell);\n    });\n\n    boardCopy.push(rowCopy);\n  });\n\n  return boardCopy;\n};\n\nexport const convertBoardArrayToObjects = (arr) => {\n  let newBoard = [];\n\n  arr.forEach((row) => {\n    let newRow = [];\n\n    row.forEach((cell) => {\n      // statuses:\n      // \"static\" - initial state for all cells,\n      //            cells with an initial value will always be static\n      // \"active\" - the cell that the algorithm is currently\n      //            selecting a value for\n      // \"visited\" - a cell that was active previously\n      newRow.push({ number: cell, status: \"static\" });\n    });\n\n    newBoard.push(newRow);\n  });\n\n  return newBoard;\n};\n","import { Board } from \"./Board.js\";\nimport { Slider } from \"./Slider.js\";\nimport { DifficultyMeter } from \"./DifficultyMeter.js\";\nimport { solve } from \"../algorithms/solve.js\";\nimport { useState } from \"react\";\nimport { unsolvedBoards } from \"../unsolvedBoards\";\nimport { deepCopyBoard, convertBoardArrayToObjects } from \"../helpers.js\";\n\nconst SudokuSolver = () => {\n  const [buttonsDisabled, setButtonsDisabled] = useState(false);\n  const [currentBoardIdx, setCurrentBoardIdx] = useState(0);\n  const [boardValues, setBoardValues] = useState(\n    convertBoardArrayToObjects(unsolvedBoards[currentBoardIdx])\n  );\n  const [solved, setSolved] = useState(false);\n\n  async function animateSolution(board) {\n    const [animations] = solve(deepCopyBoard(board));\n    setButtonsDisabled(true);\n\n    if (animations) {\n      for (const anim of animations) {\n        var animSpeed = document.getElementById(\"animSpeed\").value;\n        await animateCell(anim, animSpeed);\n      }\n    }\n\n    setButtonsDisabled(false);\n    setSolved(true);\n  }\n\n  const animateCell = (anim, animSpeed) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        let newBoard = deepCopyBoard(boardValues);\n        newBoard[anim.row][anim.col].number = anim.number;\n        newBoard[anim.row][anim.col].status = anim.status;\n        setBoardValues(newBoard);\n        resolve();\n      }, animSpeed ** 2);\n    });\n  };\n\n  const setNewBoard = () => {\n    let newBoardIdx = (currentBoardIdx + 1) % unsolvedBoards.length;\n    setBoardValues(convertBoardArrayToObjects(unsolvedBoards[newBoardIdx]));\n    setCurrentBoardIdx(newBoardIdx);\n    setSolved(false);\n  };\n\n  const resetBoard = () => {\n    setBoardValues(convertBoardArrayToObjects(unsolvedBoards[currentBoardIdx]));\n    setSolved(false);\n  };\n\n  return (\n    <>\n      <DifficultyMeter currentBoardIdx={currentBoardIdx} />\n      <Board board={boardValues} />\n      <div id=\"buttons\">\n        <button\n          disabled={buttonsDisabled || solved}\n          onClick={() => animateSolution(unsolvedBoards[currentBoardIdx])}\n        >\n          solve\n        </button>\n\n        <button disabled={buttonsDisabled} onClick={resetBoard}>\n          reset\n        </button>\n\n        <button disabled={buttonsDisabled} onClick={setNewBoard}>\n          new board\n        </button>\n      </div>\n      <Slider />\n    </>\n  );\n};\n\nexport default SudokuSolver;\n","import SudokuSolver from \"./components/SudokuSolver\";\n\nfunction App() {\n  return (\n    <div>\n      <header>Sudoku Solving Visualizer</header>\n      <SudokuSolver />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}